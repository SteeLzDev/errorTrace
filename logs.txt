package br.com.experian.buzz.infrastructure.adapter;

import br.com.experian.buzz.domain.model.OnboardingStatusModel;
import br.com.experian.buzz.domain.port.OnboardingRepositoryPort;
import br.com.experian.buzz.infrastructure.document.OnboardingDocument;
import br.com.experian.buzz.infrastructure.repository.OnboardingMongoRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.mongodb.core.MongoTemplate;

import java.util.Optional;


//Implementa o port OnboardingRepositoryPort, converte entre o modelo de dom√≠nio e a entidade
public class OnboardingRepositoryAdapter implements OnboardingRepositoryPort {

    private static final Logger log = LoggerFactory.getLogger(OnboardingRepositoryAdapter.class);
    private final OnboardingMongoRepository mongoRepository;
    private final MongoTemplate mongoTemplate;

    public OnboardingRepositoryAdapter(OnboardingMongoRepository mongoRepository, MongoTemplate mongoTemplate) {
        this.mongoRepository = mongoRepository;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public Optional<OnboardingStatusModel> findBySupplierDocument(String supplierDocument) {
        log.debug("Buscando onboarding no Banco para o documento: {}", supplierDocument);
         return mongoRepository.findBySupplierDocument(supplierDocument)
                 .map(this::documentToModel);
    }

    @Override
    public OnboardingStatusModel save (OnboardingStatusModel onboardingStatus) {
        log.debug("Salvando onboarding no Banco para o documento: {}", onboardingStatus.getSupplierDocument());
        OnboardingDocument document = modelToDocument(onboardingStatus);
        OnboardingDocument savedDocument = mongoRepository.save(document);
        return documentToModel(savedDocument);
    }

    private OnboardingStatusModel documentToModel(OnboardingDocument document) {
        Long id = document.getId() != null ? (long) document.getId().hashCode() : null;
        return new OnboardingStatusModel(
                id,
                document.getSupplierDocument(),
                document.getStatus(),
                document.getCreatedAt(),
                document.getUpdatedAt()
        );
    }

    private OnboardingDocument modelToDocument(OnboardingStatusModel model) {
        OnboardingDocument document = new OnboardingDocument();
        if(model.getId() != null) {
            document.setId(model.getId().toString());
        }
        document.setSupplierDocument(model.getSupplierDocument());
        document.setStatus(model.getStatus());
        document.setCreatedAt(model.getCreatedAt());
        document.setUpdatedAt(model.getUpdatedAt());
        return document;
    }





}
