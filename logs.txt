   private List<AntecipaAnticipationCardReceivableListDto> extractItems(
            AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {
        if (pagedResponse == null || pagedResponse.getItems() == null) {
            return new ArrayList<>();
        }
        
        JsonNullable<List<Object>> itemsNullable = pagedResponse.getItems();
        if (!itemsNullable.isPresent() || itemsNullable.get() == null) {
            log.info("No items present in JsonNullable response");
            return new ArrayList<>();
        }
        
        List<Object> rawItems = itemsNullable.get();
        List<AntecipaAnticipationCardReceivableListDto> convertedItems = new ArrayList<>();
        
        ObjectMapper objectMapper = new ObjectMapper();
        
        for (Object item : rawItems) {
            try {
                if (item instanceof LinkedHashMap) {
                    // Converter LinkedHashMap para DTO usando ObjectMapper
                    AntecipaAnticipationCardReceivableListDto dto = objectMapper.convertValue(
                        item, AntecipaAnticipationCardReceivableListDto.class);
                    convertedItems.add(dto);
                } else if (item instanceof AntecipaAnticipationCardReceivableListDto) {
                    // Se já é o tipo correto, adicionar diretamente
                    convertedItems.add((AntecipaAnticipationCardReceivableListDto) item);
                } else if (item instanceof JsonNullable) {
                    JsonNullable<?> nullableItem = (JsonNullable<?>) item;
                    if (nullableItem.isPresent() && nullableItem.get() != null) {
                        Object actualItem = nullableItem.get();
                        if (actualItem instanceof LinkedHashMap) {
                            AntecipaAnticipationCardReceivableListDto dto = objectMapper.convertValue(
                                actualItem, AntecipaAnticipationCardReceivableListDto.class);
                            convertedItems.add(dto);
                        } else if (actualItem instanceof AntecipaAnticipationCardReceivableListDto) {
                            convertedItems.add((AntecipaAnticipationCardReceivableListDto) actualItem);
                        } else {
                            log.warn("Unexpected item type inside JsonNullable: {}", actualItem.getClass().getName());
                        }
                    }
                } else {
                    log.warn("Unexpected item type in response: {}", item.getClass().getName());
                }
            } catch (Exception e) {
                log.error("Error converting item to DTO: {}", e.getMessage(), e);
            }
        }
        
        log.info("Successfully converted {} items from external API response", convertedItems.size());
        return convertedItems;
    }
