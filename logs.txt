'findHistory(String, LocalDate, String, String, Integer)' in 'br.com.experian.anticipation.application.rest.HistoryController' clashes with 'findHistory(String, LocalDate, String, String, Integer)' in 'br.com.experian.swagger.anticipation.api.HistoryApi'; incompatible return type

'findHistoryById(String)' in 'br.com.experian.anticipation.application.rest.HistoryController' clashes with 'findHistoryById(String)' in 'br.com.experian.swagger.anticipation.api.HistoryApi'; incompatible return type

Expected 3 arguments but found 1

Incompatible types. Found: 'org.springframework.http.ResponseEntity<br.com.experian.swagger.anticipation.model.AnticipationHistoryResponseTO>', required: 'org.springframework.http.ResponseEntity<br.com.experian.swagger.anticipation.model.AnticipationDetailResponseTO>'



package br.com.experian.anticipation.application.rest;

import br.com.experian.anticipation.domain.service.HistoryService;
import br.com.experian.observability.annotation.LogMethod;
import br.com.experian.swagger.anticipation.api.HistoryApi;
import br.com.experian.swagger.anticipation.model.AnticipationDetailResponseTO;
import br.com.experian.swagger.anticipation.model.AnticipationHistoryResponseTO;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.util.Optional;

@Log4j2
@RestController
public class HistoryController extends BaseController implements HistoryApi {

    private final HistoryService historyService;

    public HistoryController(HistoryService historyService) {
        this.historyService = historyService;
    }

    @Override
    @PreAuthorize(HAS_RULES)
    @LogMethod(LogMethod.LogType.FULL)
    public ResponseEntity<AnticipationHistoryResponseTO> findHistory(String capitalSourceDocument,
                                                                     LocalDate anticipationDate,
                                                                     String statusId,
                                                                     String pageId,
                                                                     Integer pageSize) {
        String anticipationDateStr = anticipationDate != null ? anticipationDate.toString() : null;

        Optional<AnticipationHistoryResponseTO> historyOpt = this.historyService.findHistoryPaginated(capitalSourceDocument,
                anticipationDateStr, null, statusId, pageId, pageSize);

        if (historyOpt.isEmpty()) {
            log.info("No anticipation history found for the given filters");
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(historyOpt.get());

    }

    @Override
    @PreAuthorize(HAS_RULES)
    @LogMethod(LogMethod.LogType.FULL)
    public ResponseEntity<AnticipationDetailResponseTO> findHistoryById(String id) {
        log.info("Fetching history details for ID: {}", id);
        Optional<AnticipationHistoryResponseTO> historyDetailOpt = this.historyService.findHistoryDetailById(id);

        if (historyDetailOpt.isEmpty()) {
            log.info("No anticipation details found for ID: {}", id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(historyDetailOpt.get());
    }
}


/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.experian.swagger.anticipation.api;

import org.springframework.format.annotation.DateTimeFormat;
import br.com.experian.swagger.anticipation.model.ErrorModelTO;
import java.time.LocalDate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-12T14:27:01.500513800-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "History", description = "the History API")
public interface HistoryApi {

    /**
     * GET /history : Retrieve anticipation history
     * Retrieve anticipation history
     *
     * @param capitalSourceDocument Capital source document to filter anticipation (optional)
     * @param anticipationDate Anticipation date to filter (format YYYY-MM-DD) (optional)
     * @param statusId Status ID to filter anticipations (optional)
     * @param pageId Page ID for pagination (optional)
     * @param pageSize Number of items per page (optional, default to 10)
     * @return The Request was successful (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "findHistory",
        summary = "Retrieve anticipation history",
        description = "Retrieve anticipation history",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> findHistory(
        @Parameter(name = "capitalSourceDocument", description = "Capital source document to filter anticipation", in = ParameterIn.QUERY) @Valid @RequestParam(value = "capitalSourceDocument", required = false) String capitalSourceDocument,
        @Parameter(name = "anticipationDate", description = "Anticipation date to filter (format YYYY-MM-DD)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "anticipationDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate anticipationDate,
        @Parameter(name = "statusId", description = "Status ID to filter anticipations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statusId", required = false) String statusId,
        @Parameter(name = "pageId", description = "Page ID for pagination", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageId", required = false) String pageId,
        @Min(1) @Max(100) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize
    );


    /**
     * GET /history/{id} : Retrieve anticipation details by ID
     * Retrieve specific anticipation details
     *
     * @param id Anticipation ID (required)
     * @return The Request was successful (status code 200)
     *         or Not found (status code 404)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "findHistoryById",
        summary = "Retrieve anticipation details by ID",
        description = "Retrieve specific anticipation details",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> findHistoryById(
        @Parameter(name = "id", description = "Anticipation ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );

}


package br.com.experian.anticipation.domain.service;

import br.com.experian.anticipation.domain.model.HistoryDetailResponse;
import br.com.experian.swagger.anticipation.model.AnticipationDetailResponseTO;
import br.com.experian.swagger.anticipation.model.AnticipationHistoryResponseTO;

import java.util.Optional;

public interface HistoryService {

    Optional<AnticipationHistoryResponseTO> findHistoryPaginated(String capitalSourceDocument,
                                                        String startAnticipationDate,
                                                        String endAnticipationDate,
                                                        String statusId,
                                                        String pageId,
                                                        Integer pageSize);

    Optional<AnticipationDetailResponseTO> findHistoryDetailById(String id, String pageId, Integer pageSize);
}



package br.com.experian.anticipation.infrastructure.integration.feign.client.antecipa;

import br.com.experian.swagger.antecipa.model.*;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;

@FeignClient(name = "AntecipaClient", url ="${api.antecipa.base.uri}")
public interface AntecipaClient {

    @GetMapping("/Originators/CapitalSources/{CapitalSourceDocument}/Suppliers/{SupplierDocument}")
    AntecipaSupplierRegistrationDto getSupplierRegistration(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("CapitalSourceDocument") String capitalSourceDocument,
            @PathVariable("SupplierDocument") String supplierDocument);

    @PostMapping("/Originators/CapitalSources/{CapitalSourceDocument}/Suppliers")
    AntecipaBasicResultDto addSupplier(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("CapitalSourceDocument") String capitalSourceDocument,
            @RequestBody AntecipaAddCapitalSourceSupplierRegistrationCommandViewModel supplierAddCommand);

    @GetMapping("/Originators/CardReceivables/{SupplierDocument}")
    AntecipaCardReceivableListDtoPagedCollectionItems getCardReceivables(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @RequestParam(value = "StatusId", required = false) String statusId,
            @RequestParam(value = "AccreditingInstitutionDocument", required = false) String accreditingInstitutionDocument,
            @RequestParam(value = "CapitalSourceDocument", required = false) String capitalSourceDocument,
            @RequestParam(value = "StartDueDate", required = false) String startDueDate,
            @RequestParam(value = "EndDueDate", required = false) String endDueDate,
            @RequestParam(value = "OrderedBy", required = false) String orderedBy,
            @RequestParam(value = "PageId", required = false) String pageId,
            @RequestParam(value = "PageSize", required = false) Integer pageSize);

    @GetMapping("/Originators/CardReceivables/{SupplierDocument}/{Id}")
    AntecipaCardReceivableDto getCardReceivableById(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @PathVariable("Id") String id);

    @PostMapping("/Originators/CardReceivables/Anticipations/Simulate/{SupplierDocument}")
    AntecipaSimulationAnticipationCardReceivableDto simulate(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @RequestBody AntecipaSimulateAnticipationCommandViewModel simulateAnticipationCommand);

    @PostMapping("/Originators/CardReceivables/Anticipations/Execute/{SupplierDocument}/{CapitalSourceDocument}/{OfferId}")
    void execute(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @PathVariable("CapitalSourceDocument") String capitalSourceDocument,
            @PathVariable("OfferId") String offerId);

    @GetMapping("/Originators/CardReceivables/Anticipations/{SupplierDocument}")
    AntecipaAnticipationCardReceivableListDtoPagedCollectionItems getAnticipations(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @RequestParam(value = "CapitalSourceDocument", required = false) String capitalSourceDocument,
            @RequestParam(value = "StartAnticipationDate", required = false) String startAnticipationDate,
            @RequestParam(value = "EndAnticipationDate", required = false) String endAnticipationDate,
            @RequestParam(value = "StatusId", required = false) String statusId,
            @RequestParam(value = "PageId", required = false) String pageId,
            @RequestParam(value = "PageSize", required = false)Integer pageSize);

    @GetMapping("/Originators/CardReceivables/Anticipations/{SupplierDocument}/{Id}")
    AntecipaAnticipationCardReceivableDto getAnticipationById(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @PathVariable("Id") String id);
}







