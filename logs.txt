private List<AntecipaAnticipationCardReceivableListDto> extractItems(
        AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {

    if (pagedResponse == null) return List.of();

    // Pode ser JsonNullable<List<...>> OU List<...>
    Object itemsField = pagedResponse.getItems();
    List<?> rawList;

    if (itemsField == null) return List.of();

    if (itemsField instanceof JsonNullable<?>) {
        JsonNullable<?> jn = (JsonNullable<?>) itemsField;
        if (!jn.isPresent() || jn.get() == null) return List.of();
        if (!(jn.get() instanceof List<?> list)) {
            log.warn("items presente mas não é List: {}", jn.get().getClass().getName());
            return List.of();
        }
        rawList = list;
    } else if (itemsField instanceof List<?>) {
        rawList = (List<?>) itemsField;
    } else {
        log.warn("Tipo inesperado em items: {}", itemsField.getClass().getName());
        return List.of();
    }

    List<AntecipaAnticipationCardReceivableListDto> out = new ArrayList<>();
    for (Object o : rawList) {
        Object v = o;

        // Alguns geradores colocam cada elemento como JsonNullable<T>
        if (v instanceof JsonNullable<?>) {
            JsonNullable<?> jnElem = (JsonNullable<?>) v;
            if (!jnElem.isPresent() || jnElem.get() == null) continue;
            v = jnElem.get();
        }

        if (v instanceof AntecipaAnticipationCardReceivableListDto dto) {
            out.add(dto);
        } else if (v instanceof LinkedHashMap<?, ?> || v instanceof java.util.Map<?, ?>) {
            out.add(MAPPER.convertValue(v, AntecipaAnticipationCardReceivableListDto.class));
        } else {
            log.warn("Elemento inesperado em items: {}", v.getClass().getName());
        }
    }
    return out;
}
