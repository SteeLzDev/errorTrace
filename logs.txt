/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.experian.swagger.anticipation.api;

import br.com.experian.swagger.anticipation.model.ErrorModelTO;
import br.com.experian.swagger.anticipation.model.OnboardingResponseTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-25T16:46:19.233920500-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Onboarding", description = "the Onboarding API")
public interface OnboardingApi {

    /**
     * POST /onboarding : Start onboarding process
     * Start onboarding process
     *
     * @return The request was successful (status code 204)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "accept",
        summary = "Start onboarding process",
        description = "Start onboarding process",
        tags = { "Onboarding" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The request was successful"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/onboarding",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> accept(
        
    );


    /**
     * GET /onboarding : Retrive onboarding status
     * Retrive onboarding status
     *
     * @return The request was successful (status code 200)
     *         or Not started (status code 204)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "retrieveStatus",
        summary = "Retrive onboarding status",
        description = "Retrive onboarding status",
        tags = { "Onboarding" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingResponseTO.class))
            }),
            @ApiResponse(responseCode = "204", description = "Not started"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/onboarding",
        produces = { "application/json" }
    )
    
    ResponseEntity<OnboardingResponseTO> retrieveStatus(
        
    );

}



package br.com.experian.anticipation.application.rest;

import br.com.experian.anticipation.domain.dto.response.OnboardingStatusResponseDto;
import br.com.experian.anticipation.domain.exception.AuthenticationException;
import br.com.experian.anticipation.domain.service.OnboardingService;
import br.com.experian.observability.annotation.LogMethod;
import br.com.experian.swagger.anticipation.api.OnboardingApi;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class OnboardingController extends BaseController implements OnboardingApi {


    private final OnboardingApi onboardingApi;

    public OnboardingController(OnboardingApi onboardingApi) {
        this.onboardingApi = onboardingApi;
    }

    @Override
    @PreAuthorize(HAS_RULES)
    @LogMethod(LogMethod.LogType.FULL)
    public ResponseEntity<List<OnboardingStatusResponseDto>> getOnboardingStatus (
            @RequestHeader(value = "X-Supplier-Document", required = false) String supplierDocumentHeader,
            @RequestParam(value = "supplierDocument", required = false) String supplierDocumentParam) {
    }
}



