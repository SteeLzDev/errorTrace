// Trecho do m√©todo processReceivables melhorado
private List<ReceivableItemTO> processReceivables(AntecipaAnticipationCardReceivableDto detail,
                                                AntecipaAnticipationCardReceivableListDto listItem) {
    List<ReceivableItemTO> receivables = new ArrayList<>();

    if (detail == null) return receivables;

    // Processar anticipated items
    if (detail.getAnticipatedItems() != null && detail.getAnticipatedItems().isPresent()) {
        Object anticipatedItemsObj = detail.getAnticipatedItems().get();
        if (anticipatedItemsObj instanceof List<?>) {
            List<?> anticipatedItems = (List<?>) anticipatedItemsObj;

            for (Object itemObj : anticipatedItems) {
                if (itemObj instanceof br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) {
                    br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto sourceItem =
                            (br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) itemObj;
                    ReceivableItemTO item = convertToReceivableItem(sourceItem, detail, listItem);
                    if (item != null) {
                        receivables.add(item);
                    }
                } else {
                    log.warn("Unexpected item type in anticipatedItems: {}", itemObj.getClass().getName());
                }
            }
        }
    }
    
    // Similar logic for notAnticipatedItems...
    return receivables;
}
