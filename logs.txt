Class 'ReceivablesController' must either be declared abstract or implement abstract method 'findAvailables()' in 'ReceivablesApi'
Method does not override method from its superclass

Cannot resolve method 'getNetValue' in 'AntecipaCardReceivableAnticipationSimulationDto'

'mapToPaymentTypeTO(br.com.experian.anticipation.domain.enums.PaymentType)' in 'br.com.experian.anticipation.application.adapter.ReceivablesMapper' cannot be applied to '(br.com.experian.swagger.anticipation.model.PaymentTypeTO)'


/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.experian.swagger.anticipation.api;

import br.com.experian.swagger.anticipation.model.ErrorModelTO;
import br.com.experian.swagger.anticipation.model.ReceivableResponseTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-26T12:42:13.977779100-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Receivables", description = "the Receivables API")
public interface ReceivablesApi {

    /**
     * GET /receivables : Retrieve available receivables
     * Retrieve available receivables
     *
     * @return The request was successful (status code 200)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "findAvailables",
        summary = "Retrieve available receivables",
        description = "Retrieve available receivables",
        tags = { "Receivables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceivableResponseTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receivables",
        produces = { "application/json" }
    )
    
    ResponseEntity<ReceivableResponseTO> findAvailables(
        
    );

}
