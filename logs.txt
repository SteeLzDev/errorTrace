Field 'jpaRepository' might not have been initialized



package br.com.experian.buzz.infrastructure.adapter;

import br.com.experian.buzz.domain.model.OnboardingStatusModel;
import br.com.experian.buzz.domain.port.OnboardingRepositoryPort;
import br.com.experian.buzz.infrastructure.entity.OnboardingEntity;
import br.com.experian.buzz.infrastructure.repository.OnboardingJpaRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Optional;


//Implementa o port OnboardingRepositoryPort, converte entre o modelo de dom√≠nio e a entidade JPA.
@Component
@RequiredArgsConstructor
public class OnboardingRepositoryAdapter implements OnboardingRepositoryPort {

    private final OnboardingJpaRepository jpaRepository;

    @Override
    public Optional<OnboardingStatusModel> findBySupplierDocument(String supplierDocument) {
         return jpaRepository.findBySupplierDocument(supplierDocument)
                 .map(this::entityToModel);
    }

    @Override
    public OnboardingStatusModel save (OnboardingStatusModel onboardingStatus) {
        OnboardingEntity entity = modelToEntity(onboardingStatus);
        OnboardingEntity savedEntity = jpaRepository.save(entity);
        return entityToModel(savedEntity);
    }

    private OnboardingStatusModel entityToModel(OnboardingEntity entity) {
        return new OnboardingStatusModel(
                entity.getId(),
                entity.getSupplierDocument(),
                entity.getStatus(),
                entity.getCreatedAt(),
                entity.getUpdatedAt()
        );
    }

    private OnboardingEntity modelToEntity(OnboardingStatusModel model) {
         OnboardingEntity entity = new OnboardingEntity();
                entity.setId(model.getId());
                entity.setSupplierDocument(model.getSupplierDocument());
                entity.setStatus(model.getStatus());
                entity.setCreatedAt(model.getUpdatedAt());
                entity.setUpdatedAt(model.getUpdatedAt());
                return entity;
    }





}


