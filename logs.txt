    private List<ReceivableItemTO> processReceivables(AntecipaAnticipationCardReceivableDto detail,
                                                    AntecipaAnticipationCardReceivableListDto listItem) {
        List<ReceivableItemTO> receivables = new ArrayList<>();

        if (detail == null) return receivables;

        if (detail.getAnticipatedItems() != null && detail.getAnticipatedItems().isPresent()) {
            Object anticipatedItemsObj = detail.getAnticipatedItems().get();
            if (anticipatedItemsObj instanceof List<?>) {
                List<?> anticipatedItems = (List<?>) anticipatedItemsObj;

                for (Object itemObj : anticipatedItems) {
                    try {
                        AntecipaAnticipationCardReceivabletDto sourceItem = null;
                        
                        if (itemObj instanceof AntecipaAnticipationCardReceivabletDto) {
                            sourceItem = (AntecipaAnticipationCardReceivabletDto) itemObj;
                        } else if (itemObj instanceof LinkedHashMap) {
                            // Converter LinkedHashMap para DTO usando ObjectMapper
                            sourceItem = objectMapper.convertValue(itemObj, AntecipaAnticipationCardReceivabletDto.class);
                        } else {
                            log.warn("Unexpected item type in anticipatedItems: {}", itemObj.getClass().getName());
                            continue;
                        }
                        
                        ReceivableItemTO item = convertToReceivableItem(sourceItem, detail, listItem);
                        if (item != null) {
                            receivables.add(item);
                        }
                    } catch (Exception e) {
                        log.error("Error converting anticipated item to DTO: {}", e.getMessage(), e);
                    }
                }
            }
        }
