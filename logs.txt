package br.com.experian.buzz.config;

import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;

/**
 * üîç Configura√ß√£o de debug que desabilita SSL completamente.
 * Cria RestTemplate customizado com SSL bypass para desenvolvimento.
 * ‚ö†Ô∏è APENAS PARA DESENVOLVIMENTO - N√ÉO USAR EM PRODU√á√ÉO!
 */
@Configuration
@Profile("debug")
public class DebugConfig {

    private static final Logger log = LoggerFactory.getLogger(DebugConfig.class);

    /**
     * üåê RestTemplate com SSL desabilitado para debugging.
     */
    @Bean
    public RestTemplate restTemplate() {
        try {
            log.warn("‚ö†Ô∏è Configurando RestTemplate com SSL DESABILITADO para DEBUG");
            
            // Cria SSLContext que aceita todos os certificados
            SSLContext sslContext = SSLContextBuilder.create()
                    .loadTrustMaterial((certificate, authType) -> true)
                    .build();

            // Configura HttpClient com SSL desabilitado
            CloseableHttpClient httpClient = HttpClients.custom()
                    .setSSLContext(sslContext)
                    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
                    .build();

            // Configura RequestFactory customizada
            HttpComponentsClientHttpRequestFactory requestFactory = 
                    new HttpComponentsClientHttpRequestFactory(httpClient);
            requestFactory.setConnectTimeout(10000);
            requestFactory.setReadTimeout(30000);

            RestTemplate restTemplate = new RestTemplate(requestFactory);
            
            log.info("‚úÖ RestTemplate configurado com SSL desabilitado");
            return restTemplate;
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao configurar RestTemplate com SSL desabilitado", e);
            throw new RuntimeException("Falha na configura√ß√£o do RestTemplate", e);
        }
    }
}
