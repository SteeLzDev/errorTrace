private List<AntecipaAnticipationCardReceivableListDto> extractItems(
        AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {

    if (pagedResponse == null || pagedResponse.getItems() == null) return List.of();

    // tipo correto, como você já ajustou
    JsonNullable<List<AntecipaAnticipationCardReceivableListDto>> itemsNullable = pagedResponse.getItems();
    if (!itemsNullable.isPresent() || itemsNullable.get() == null) return List.of();

    List<?> rawItems = itemsNullable.get();
    List<AntecipaAnticipationCardReceivableListDto> converted = new ArrayList<>();

    for (Object item : rawItems) {
        try {
            Object v = (item instanceof JsonNullable<?> jn && jn.isPresent()) ? jn.get() : item;

            if (v instanceof AntecipaAnticipationCardReceivableListDto dto) {
                converted.add(dto);

            } else if (v instanceof LinkedHashMap<?, ?> || v instanceof java.util.Map<?, ?>) {
                // AGORA funciona porque o ObjectMapper conhece JsonNullable
                converted.add(objectMapper.convertValue(
                    v, AntecipaAnticipationCardReceivableListDto.class));

            } else {
                log.warn("Unexpected item type in response: {}", v == null ? "null" : v.getClass().getName());
            }
        } catch (Exception e) {
            log.error("Error converting item to DTO", e);
        }
    }
    return converted;
}
