import java.util.stream.Collectors;

private List<AntecipaAnticipationCardReceivableListDto> extractItems(
        AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {

    if (pagedResponse == null) return Collections.emptyList();

    JsonNullable<List<?>> itemsNullable = (JsonNullable<List<?>>) (JsonNullable<?>) pagedResponse.getItems();
    if (itemsNullable == null || !itemsNullable.isPresent()) return Collections.emptyList();

    Object raw = itemsNullable.get();
    if (!(raw instanceof List<?> rawList) || rawList.isEmpty()) return Collections.emptyList();

    // Converte cada elemento da lista (LinkedHashMap -> DTO) de forma segura
    return rawList.stream()
            .filter(Objects::nonNull)
            .map(elem -> {
                try {
                    return objectMapper.convertValue(elem, AntecipaAnticipationCardReceivableListDto.class);
                } catch (Exception e) {
                    log.warn("Falha convertendo item de antecipação: {}", e.getMessage());
                    return null;
                }
            })
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
}
