Class 'ReceivablesController' must either be declared abstract or implement abstract method 'findAvailables(LocalDate, Integer, Integer)' in 'ReceivablesApi'

Method does not override method from its superclass

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.experian.swagger.anticipation.api;

import org.springframework.format.annotation.DateTimeFormat;
import br.com.experian.swagger.anticipation.model.ErrorModelTO;
import java.time.LocalDate;
import br.com.experian.swagger.anticipation.model.ReceivableResponseTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-01T11:12:32.830861800-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Receivables", description = "the Receivables API")
public interface ReceivablesApi {

    /**
     * GET /receivables : Retrieve available receivables
     * Retrieve available receivables
     *
     * @param date Payment date to filter receivables (format YYYY-MM-DD). Defaults to today&#39;s date if not provided. (optional)
     * @param limit Maximum number of receivables to return (optional, default to 10)
     * @param offset Number of receivables to skip for pagination (optional, default to 0)
     * @return The request was successful (status code 200)
     *         or Bad Request - Invalid date format (status code 400)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "findAvailables",
        summary = "Retrieve available receivables",
        description = "Retrieve available receivables",
        tags = { "Receivables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceivableResponseTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid date format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        },
        security = {
            @SecurityRequirement(name = "OauthSecurityUser", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receivables",
        produces = { "application/json" }
    )
    
    ResponseEntity<ReceivableResponseTO> findAvailables(
        @Parameter(name = "date", description = "Payment date to filter receivables (format YYYY-MM-DD). Defaults to today's date if not provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
        @Min(1) @Max(100) @Parameter(name = "limit", description = "Maximum number of receivables to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Number of receivables to skip for pagination", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset
    );

}



package br.com.experian.anticipation.application.rest;

import br.com.experian.anticipation.application.adapter.ReceivablesMapper;
import br.com.experian.anticipation.domain.service.ReceivablesService;
import br.com.experian.observability.annotation.LogMethod;
import br.com.experian.swagger.anticipation.api.ReceivablesApi;
import br.com.experian.swagger.anticipation.model.ReceivableResponseTO;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;


@RestController
public class ReceivablesController extends  BaseController implements ReceivablesApi {

    private final ReceivablesService receivablesService;
    private final HttpServletRequest request;

    public ReceivablesController(ReceivablesService receivablesService, HttpServletRequest request) {
        this.receivablesService = receivablesService;
        this.request = request;
    }

    @Override
    @PreAuthorize(HAS_RULES)
    @LogMethod(LogMethod.LogType.FULL)
    public ResponseEntity<ReceivableResponseTO> findAvailables() {
        final String supplierDocument = extractSupplierDocument();

        final int pageLimit = 10;
        final int pageOffset = 0;

        return receivablesService.getReceivables(supplierDocument, pageLimit, pageOffset)
                .map(dto -> ResponseEntity.ok(ReceivablesMapper.toReceivableResponse(dto.getReceivables())))
                .orElse(ResponseEntity.noContent().build());
    }

    private String extractSupplierDocument() {
        String header = request.getHeader("X-Supplier-Document");
        if (header != null && !header.isBlank()) {
            return header.trim();
        }
        throw new IllegalArgumentException("Supplier document is required (header X-Supplier-Document)");
    }
}

