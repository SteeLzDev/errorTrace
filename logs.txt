package br.com.experian.anticipation.domain.service.impl;

import br.com.experian.anticipation.domain.constant.HistoryStatusMapping;
import br.com.experian.anticipation.domain.exception.ConflictException;
import br.com.experian.anticipation.domain.model.Agreement;
import br.com.experian.anticipation.domain.port.AuthenticationPort;
import br.com.experian.anticipation.domain.repository.AgreementRepository;
import br.com.experian.anticipation.domain.service.HistoryService;
import br.com.experian.anticipation.infrastructure.integration.feign.client.antecipa.AntecipaClient;
import br.com.experian.observability.annotation.LogMethod;
import br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto;
import br.com.experian.swagger.antecipa.model.*;
import br.com.experian.swagger.anticipation.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.log4j.Log4j2;
import org.openapitools.jackson.nullable.JsonNullable;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;


@Log4j2
public class HistoryServiceImpl implements HistoryService {


    private final AntecipaClient antecipaClient;
    private final AgreementRepository agreementRepository;
    private final AuthenticationPort authenticationPort;
    private final ObjectMapper objectMapper;

    public HistoryServiceImpl(AntecipaClient antecipaClient,
                              AgreementRepository agreementRepository, AuthenticationPort authenticationPort, ObjectMapper objectMapper) {
        this.antecipaClient = antecipaClient;
        this.agreementRepository = agreementRepository;
        this.authenticationPort = authenticationPort;
        this.objectMapper = objectMapper;
    }


//    @Override
//    @LogMethod
//    public Optional<HistoryResponseTO> findHistoryPaginated(String capitalSourceDocument,
//                                                            String startAnticipationDate,
//                                                            String endAnticipationDate,
//                                                            String statusId,
//                                                            String pageId,
//                                                            Integer pageSize) {
//        //Agreement agreement = this.getUserAgreement();
//        //String supplierDocument = agreement.getNationalRegistrationId();
//        //TODO Temporário - Usar documento fixo para testes, depois voltar com o getUserAgreement
//        String supplierDocument = "45181802000183";
//
//        log.info("Fetching paginated anticipation history for supplier: {}", supplierDocument);
//
//        try {
//            String token = "Bearer " + authenticationPort.getValidToken();
//
//            AntecipaAnticipationCardReceivableListDtoPagedCollectionItems page =
//                    antecipaClient.getAnticipations(token,
//                            supplierDocument,
//                            capitalSourceDocument,
//                            startAnticipationDate,
//                            endAnticipationDate,
//                            statusId,
//                            pageId,
//                            pageSize);
//
//            List<AntecipaAnticipationCardReceivableListDto> externalItems = extractItems(page);
//            if (externalItems == null || externalItems.isEmpty()) {
//                log.info("No anticipation history found for supplier: {}", supplierDocument);
//                return Optional.empty();
//            }
//
//            List<HistoryItemTO> historyItems = new ArrayList<>();
//
//            for (AntecipaAnticipationCardReceivableListDto ext : externalItems) {
//                HistoryItemTO item = new HistoryItemTO();
//
//                //id
//                String id = ext.getId() != null ? String.valueOf(ext.getId()) : null;
//                item.setId(id);
//
//
//                //requestDate (YYY-MM-DD) a partir de createdAt
//                if (ext.getCreatedAt() != null) {
//                    LocalDateTime ldt = parseToLocalDate(ext.getCreatedAt().toString());
//                    if (ldt != null) {
//                        item.setRequestDate(ldt.toLocalDate());
//                    }
//
//                }
//                //Status mapping usando mapeamento
//                if (ext.getStatusId() != null) {
//                    String mappedStatus = HistoryStatusMapping.mapExternalIdToResponseStatus(ext.getStatusId());
//                    item.setStatus(HistoryItemTO.StatusEnum.valueOf(mappedStatus));
//                }
//
//                //ReceivablesCount -> somatório (anticipated + noAnticipated) do detalhe
//                if (id != null) {
//                    try {
//                        AntecipaAnticipationCardReceivableDto detail =
//                                antecipaClient.getAnticipationById(token, supplierDocument, id);
//                        int count = countReceivables(detail);
//                        item.setReceivablesCount(count);
//                    } catch (Exception e) {
//                        log.warn("Failed to fetch receivables count for ID: {}", id, e);
//                        item.setReceivablesCount(0);
//                    }
//                } else {
//                    item.setReceivablesCount(0);
//                }
//                historyItems.add(item);
//            }
//            HistoryResponseTO response = new HistoryResponseTO();
//            response.setItems(historyItems);
//            response.setNextPage(extractNextPageId(page));
//            response.setPageSize(pageSize != null ? pageSize : 10);
//            log.info("Successfully retrieved {} anticipation records for supplier: {}", historyItems.size(), supplierDocument);
//            return Optional.of(response);
//
//        } catch (Exception e) {
//            log.error("Error fetching anticipation history for supplier: {}", supplierDocument, e);
//            return Optional.empty();
//        }
//    }

    @Override
    @LogMethod
    public Optional<HistoryResponseTO> findHistoryWithReceivables(String supplierDocument,
                                                                  String capitalSourceDocument,
                                                                  String startAnticipationDate,
                                                                  String endAnticipationDate,
                                                                  String statusId,
                                                                  String pageId,
                                                                  Integer pageSize) {
        supplierDocument = "45181802000183";
        log.info("Fetching anticipation history with receivables for supplier: {}", supplierDocument);


        try {
            String token = "Bearer " + authenticationPort.getValidToken();

            AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse =
                    antecipaClient.getAnticipations(token,
                            supplierDocument,
                            capitalSourceDocument,
                            startAnticipationDate,
                            endAnticipationDate,
                            statusId,
                            pageId,
                            pageSize);
            List<AntecipaAnticipationCardReceivableListDto> externalItems = extractItems(pagedResponse);

            if (externalItems == null || externalItems.isEmpty()) {
                log.info("No anticipation history for supplier: {}", supplierDocument);
                return Optional.empty();
            }
            List<HistoryItemTO> historyItems = new ArrayList<>();

            for (AntecipaAnticipationCardReceivableListDto ext : externalItems) {
                HistoryItemTO item = new HistoryItemTO();

                //ID
                String id = null;
                if (ext.getId() != null && ext.getId().isPresent()) {
                    id = String.valueOf(ext.getId().get());
                }
                item.setId(id);

                //requestDate (YYYY-MM-DD) a partir de createdAt
                if (ext.getCreatedAt() != null) {
                    LocalDateTime ldt = parseToLocalDate(ext.getCreatedAt().toString());
                    if (ldt != null) {
                        String formattedDate = ldt.toLocalDate().format(DateTimeFormatter.ISO_LOCAL_DATE);
                        item.setRequestDate(LocalDate.parse(formattedDate));
                    }
                }

                //Status mapping usando mapeamento
                if (ext.getStatusId() != null) {
                    String mappedStatus = HistoryStatusMapping.mapExternalIdToResponseStatus(ext.getStatusId());
                    item.setStatus(HistoryItemTO.StatusEnum.valueOf(mappedStatus));
                }

                //Buscar detalhe de antecipação para obter receivables
                if (id != null) {
                    try {
                        AntecipaAnticipationCardReceivableDto detail =
                                antecipaClient.getAnticipationById(token, supplierDocument, id);

                        //Processar receivables do detalhe
                        List<ReceivableItemTO> receivables = processReceivables(detail, ext);
                        item.setReceivables(receivables);

                        //Calcular totais
                        BigDecimal totalNetValue = receivables.stream()
                                .map(ReceivableItemTO::getNetValue)
                                .filter(Objects::nonNull)
                                .reduce(BigDecimal.ZERO, BigDecimal::add);

                        item.setTotalNetValue(totalNetValue);
                        item.setReceivablesCount(receivables.size());

                    } catch (Exception e) {
                        log.warn("Failed to fetch receivables details for ID: {}", id, e);
                        item.setReceivables(new ArrayList<>());
                        item.setTotalNetValue(BigDecimal.ZERO);
                        item.setReceivablesCount(0);
                    }
                } else {
                    item.setReceivables(new ArrayList<>());
                    item.setTotalNetValue(BigDecimal.ZERO);
                    item.setReceivablesCount(0);
                }
                historyItems.add(item);
            }
            HistoryResponseTO response = new HistoryResponseTO();
            response.setItems(historyItems);
            response.setNextPage(null);
            response.setPageSize(pageSize != null ? pageSize : 10);

            log.info("Successfully retrieved {} anticipation records with receivables for supplier: {}", historyItems.size(), supplierDocument);
            return Optional.of(response);

        } catch (Exception e) {
            log.error("Error fetching anticipation history with receivables for supplier: {}", supplierDocument, e);

             throw new RuntimeException("Error with process anticipations history", e);
        }
    }

    private List<AntecipaAnticipationCardReceivableListDto> extractItems(
            AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {

        if (pagedResponse == null || pagedResponse.getItems() == null) return List.of();

        JsonNullable<List<AntecipaAnticipationCardReceivableListDto>> itemsNullable = pagedResponse.getItems();
        if (!itemsNullable.isPresent() || itemsNullable.get() == null) return List.of();

        List<?> rawItems = itemsNullable.get();
        List<AntecipaAnticipationCardReceivableListDto> converted = new ArrayList<>();

        for (Object item : rawItems) {
            try {
                Object v = (item instanceof JsonNullable<?> jn && jn.isPresent()) ? jn.get() : item;

                if (v instanceof AntecipaAnticipationCardReceivableListDto dto) {
                    converted.add(dto);

                } else if (v instanceof LinkedHashMap<?, ?> || v instanceof java.util.Map<?, ?>) {

                    converted.add(objectMapper.convertValue(
                            v, AntecipaAnticipationCardReceivableListDto.class));

                } else {
                    log.warn("Unexpected item type in response: {}", v == null ? "null" : v.getClass().getName());
                }
            } catch (Exception e) {
                log.error("Error converting item to DTO", e);
            }
        }
        return converted;
    }


    private List<ReceivableItemTO> processReceivables(AntecipaAnticipationCardReceivableDto detail,
                                                      AntecipaAnticipationCardReceivableListDto listItem) {
        List<ReceivableItemTO> receivables = new ArrayList<>();

        if (detail == null) return receivables;

        if (detail.getAnticipatedItems() != null && detail.getAnticipatedItems().isPresent()) {
            Object anticipatedItemsObj = detail.getAnticipatedItems().get();
            if (anticipatedItemsObj instanceof List<?>) {
                List<?> anticipatedItems = (List<?>) anticipatedItemsObj;

                for (Object itemObj : anticipatedItems) {
                    try {
                        AntecipaAnticipationCardReceivabletDto sourceItem = null;

                        if (itemObj instanceof AntecipaAnticipationCardReceivabletDto) {
                            sourceItem = (AntecipaAnticipationCardReceivabletDto) itemObj;
                        } else if (itemObj instanceof LinkedHashMap) {
                            // Converter LinkedHashMap para DTO usando ObjectMapper
                            sourceItem = objectMapper.convertValue(itemObj, AntecipaAnticipationCardReceivabletDto.class);
                        } else {
                            log.warn("Unexpected item type in anticipatedItems: {}", itemObj.getClass().getName());
                            continue;
                        }

                        ReceivableItemTO item = convertToReceivableItem(sourceItem, detail, listItem);
                        if (item != null) {
                            receivables.add(item);
                        }
                    } catch (Exception e) {
                        log.error("Error converting anticipated item to DTO: {}", e.getMessage(), e);
                    }
                }
            }
        }

        if (detail.getNotAnticipatedItems() != null && detail.getNotAnticipatedItems().isPresent()) {
            Object notAnticipatedItemsObj = detail.getNotAnticipatedItems().get();
            if (notAnticipatedItemsObj instanceof List<?>) {
                List<?> notAnticipatedItems = (List<?>) notAnticipatedItemsObj;

                for (Object itemObj : notAnticipatedItems) {
                    try {
                        AntecipaAnticipationCardReceivabletDto sourceItem = null;

                        if (itemObj instanceof AntecipaAnticipationCardReceivabletDto) {
                            sourceItem = (AntecipaAnticipationCardReceivabletDto) itemObj;
                        } else if (itemObj instanceof LinkedHashMap) {
                            // Converter LinkedHashMap para DTO usando ObjectMapper
                            sourceItem = objectMapper.convertValue(itemObj, AntecipaAnticipationCardReceivabletDto.class);
                        } else {
                            log.warn("Unexpected item type in notAnticipatedItems: {}", itemObj.getClass().getName());
                            continue;
                        }

                        ReceivableItemTO item = convertToReceivableItem(sourceItem, detail, listItem);
                        if (item != null) {
                            receivables.add(item);
                        }
                    } catch (Exception e) {
                        log.error("Error converting not anticipated item to DTO: {}", e.getMessage(), e);
                    }
                }
            }
        }

        return receivables;
    }

    private ReceivableItemTO convertToReceivableItem(AntecipaAnticipationCardReceivabletDto sourceItem,
                                                     AntecipaAnticipationCardReceivableDto parentDetail,
                                                     AntecipaAnticipationCardReceivableListDto parentListItem) {
        if (sourceItem == null) return null;

        ReceivableItemTO item = new ReceivableItemTO();

        //CNPJ - pegar do supplier do detalhe pai
        if (parentDetail.getSupplier() != null && parentDetail.getSupplier().getDocument() != null) {
            JsonNullable<String> documentNullable = parentDetail.getSupplier().getDocument();
            if (documentNullable.isPresent()) {
                item.setCnpj(documentNullable.get());
            }
        }

        //Accrediting Institution - pegar do accreditingInstitution
        if (parentDetail.getAccreditingInstitution() != null && parentDetail.getAccreditingInstitution().getName() != null) {
            JsonNullable<String> nameNullable = parentDetail.getAccreditingInstitution().getName();
            if (nameNullable.isPresent()) {
                item.setAccreditingInstitution(nameNullable.get());
            }
        }

        //Installments - assumindo 1 se não especificado
        item.setInstallments(1);

        //InstallmentValue - valor da parcela
        if (sourceItem.getSelectedAmount() != null) {
            item.setInstallmentValue(BigDecimal.valueOf(sourceItem.getSelectedAmount()));
        }

        //FeePercentage - effectiveRate
        if (sourceItem.getEffectiveRate() != null) {
            item.setFeePercentage(BigDecimal.valueOf(sourceItem.getEffectiveRate()));
        }

        //Usando discount individual do sourceItem ao invés do parentListItem
        if (sourceItem.getDiscount() != null) {
            item.setDiscountValue(BigDecimal.valueOf(sourceItem.getDiscount()));
        } else {
            item.setDiscountValue(BigDecimal.ZERO);
        }

        //Usando netValue individual do sourceItem
        if (sourceItem.getNetValue() != null) {
            item.setNetValue(BigDecimal.valueOf(sourceItem.getNetValue()));
        } else {
            item.setNetValue(BigDecimal.ZERO);
        }

        return item;
    }

    private static LocalDateTime parseToLocalDate(String s) {
        if (s == null || s.isBlank()) return null;
        try {
            return OffsetDateTime.parse(s).toLocalDateTime();
        } catch (DateTimeParseException ignore) {
        }
        try {
            return LocalDateTime.parse(s);
        } catch (DateTimeParseException ignore) {
        }
        try {
            return LocalDate.parse(s).atStartOfDay();
        } catch (DateTimeParseException ignore) {
        }

        return null;
    }

    private Agreement getUserAgreement() {
        return this.agreementRepository.getUserAgreement()
                .orElseThrow(() -> new ConflictException("3"));
    }

}


{
  "items": [
    {
      "id": "815f98c0-af11-4b8f-b33a-75c42eef0b36",
      "requestDate": [
        2025,
        9,
        1
      ],
      "status": "ERROR",
      "receivablesCount": 5,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 1632.16,
          "feePercentage": 0.05,
          "discountValue": 78.88773333333333,
          "netValue": 1553.2722666666666
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 2018.75,
          "feePercentage": 0.05,
          "discountValue": 94.20833333333333,
          "netValue": 1924.5416666666667
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 2494.36,
          "feePercentage": 0.05,
          "discountValue": 116.40346666666667,
          "netValue": 2377.9565333333335
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 6101.68,
          "feePercentage": 0.05,
          "discountValue": 284.7450666666667,
          "netValue": 5816.934933333333
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 500.63,
          "feePercentage": 0.05,
          "discountValue": 25.0315,
          "netValue": 475.5985
        }
      ],
      "totalNetValue": 12148.303899999999
    },
    {
      "id": "0e489c9a-4ca1-4e9a-9f29-c628b34aaf85",
      "requestDate": [
        2025,
        8,
        29
      ],
      "status": "CONCLUDED",
      "receivablesCount": 4,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 2093.25,
          "feePercentage": 0.05,
          "discountValue": 94.19625,
          "netValue": 1999.05375
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 6132.17,
          "feePercentage": 0.05,
          "discountValue": 286.16793333333334,
          "netValue": 5846.002066666667
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 1713.29,
          "feePercentage": 0.05,
          "discountValue": 74.24256666666666,
          "netValue": 1639.0474333333334
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 1647.83,
          "feePercentage": 0.05,
          "discountValue": 68.65958333333333,
          "netValue": 1579.1704166666666
        }
      ],
      "totalNetValue": 11063.273666666668
    },
    {
      "id": "c90c1ccd-8342-43ea-a4e9-f3604299b06b",
      "requestDate": [
        2025,
        8,
        28
      ],
      "status": "ERROR",
      "receivablesCount": 1,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 61229650",
          "installments": 1,
          "installmentValue": 5222,
          "feePercentage": 0.02,
          "discountValue": 313.32,
          "netValue": 4908.68
        }
      ],
      "totalNetValue": 4908.68
    },
    {
      "id": "e68c6d32-3c10-4cd1-b03b-150f4000911c",
      "requestDate": [
        2025,
        8,
        28
      ],
      "status": "CONCLUDED",
      "receivablesCount": 4,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 61229650",
          "installments": 1,
          "installmentValue": 1890.45,
          "feePercentage": 0.0139,
          "discountValue": 24.525438,
          "netValue": 1865.924562
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 61229650",
          "installments": 1,
          "installmentValue": 960.56,
          "feePercentage": 0.0139,
          "discountValue": 12.0166056,
          "netValue": 948.5433944
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 61229650",
          "installments": 1,
          "installmentValue": 7404.2,
          "feePercentage": 0.0139,
          "discountValue": 99.48776733333334,
          "netValue": 7304.712232666667
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 61229650",
          "installments": 1,
          "installmentValue": 95.72,
          "feePercentage": 0.0139,
          "discountValue": 1.1531069333333333,
          "netValue": 94.56689306666667
        }
      ],
      "totalNetValue": 10213.747082133334
    },
    {
      "id": "07629699-25b5-47b4-ab57-45b8f48f756b",
      "requestDate": [
        2025,
        8,
        19
      ],
      "status": "CONCLUDED",
      "receivablesCount": 2,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 5965.95,
          "feePercentage": 0.05,
          "discountValue": 1183.24675,
          "netValue": 4782.70325
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 1140.37,
          "feePercentage": 0.05,
          "discountValue": 228.074,
          "netValue": 912.296
        }
      ],
      "totalNetValue": 5694.99925
    },
    {
      "id": "8f1c8bae-9554-45e2-a16d-0affff73eebb",
      "requestDate": [
        2025,
        8,
        19
      ],
      "status": "ERROR",
      "receivablesCount": 2,
      "receivables": [
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 5965.95,
          "feePercentage": 0.05,
          "discountValue": 1183.24675,
          "netValue": 4782.70325
        },
        {
          "cnpj": "45181802000183",
          "accreditingInstitution": "COMPRADOR TESTE CERC 46572145",
          "installments": 1,
          "installmentValue": 1140.37,
          "feePercentage": 0.05,
          "discountValue": 228.074,
          "netValue": 912.296
        }
      ],
      "totalNetValue": 5694.99925
    }
  ],
  "nextPage": null,
  "pageSize": 10
}
