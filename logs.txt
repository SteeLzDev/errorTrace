
    private List<ReceivableItem> processReceivables(AntecipaAnticipationCardReceivableDto detail, 
                                                   AntecipaAnticipationCardReceivableListDto listItem) {
        List<ReceivableItem> receivables = new ArrayList<>();
        
        if (detail == null) return receivables;

        // Processar anticipated items
        if (detail.getAnticipatedItems() != null && detail.getAnticipatedItems().isPresent()) {
            Object anticipatedItemsObj = detail.getAnticipatedItems().get();
            if (anticipatedItemsObj instanceof List<?>) {
                List<?> anticipatedItems = (List<?>) anticipatedItemsObj;
                
                for (Object itemObj : anticipatedItems) {
                    if (itemObj instanceof br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) {
                        br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto sourceItem = 
                                (br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) itemObj;
                        ReceivableItem item = convertToReceivableItem(sourceItem, detail, listItem);
                        if (item != null) {
                            receivables.add(item);
                        }
                    } else {
                        log.warn("Unexpected item type in anticipatedItems: {}", itemObj.getClass().getName());
                    }
                }
            }
        }

        // Processar not anticipated items
        if (detail.getNotAnticipatedItems() != null && detail.getNotAnticipatedItems().isPresent()) {
            Object notAnticipatedItemsObj = detail.getNotAnticipatedItems().get();
            if (notAnticipatedItemsObj instanceof List<?>) {
                List<?> notAnticipatedItems = (List<?>) notAnticipatedItemsObj;
                
                for (Object itemObj : notAnticipatedItems) {
                    if (itemObj instanceof br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) {
                        br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto sourceItem = 
                                (br.com.experian.swagger.antecipa.model.AntecipaAnticipationCardReceivabletDto) itemObj;
                        ReceivableItem item = convertToReceivableItem(sourceItem, detail, listItem);
                        if (item != null) {
                            receivables.add(item);
                        }
                    } else {
                        log.warn("Unexpected item type in notAnticipatedItems: {}", itemObj.getClass().getName());
                    }
                }
            }
        }

        return receivables;
    }
