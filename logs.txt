package br.com.experian.buzz.infrastructure.adapter;

import br.com.experian.buzz.domain.dto.AuthenticationResponseDto;
import br.com.experian.buzz.domain.exeption.AuthenticationException;
import br.com.experian.buzz.domain.port.AuthenticationPort;
import br.com.experian.buzz.infrastructure.integration.feign.client.auth.AntecipaAuthClient;
import feign.FeignException;
import feign.Response;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.Base64;

/**
 * 游댌 VERS츾O DEBUG DO ADAPTER DE AUTENTICA칂츾O
 * Para investigar problemas de autentica칞칚o
 */
@Component
@Profile({"debug", "dev"})
public class AntecipaAuthAdapterDebug implements AuthenticationPort {

    private final AntecipaAuthClient authClient;
    private final String clientId;
    private final String clientSecret;
    private final String basicAuth;

    private String currentToken;
    private LocalDateTime tokenExpiry;

    public AntecipaAuthAdapterDebug(
            AntecipaAuthClient authClient,
            @Value("${antecipa.auth.client-id}") String clientId,
            @Value("${antecipa.auth.client-secret}") String clientSecret) {
        
        this.authClient = authClient;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.basicAuth = Base64.getEncoder().encodeToString((clientId + ":" + clientSecret).getBytes());
        
        System.out.println("游댌 DEBUG AUTH ADAPTER INICIALIZADO");
        System.out.println("Client ID: " + clientId);
        System.out.println("Client Secret: " + clientSecret.substring(0, 8) + "...");
        System.out.println("Basic Auth: " + basicAuth.substring(0, 20) + "...");
    }

    @Override
    public String getValidToken() {
        System.out.println("游댌 [DEBUG] Verificando token v치lido...");
        
        if (currentToken == null || tokenExpiry == null || LocalDateTime.now().isAfter(tokenExpiry)) {
            System.out.println("游댌 [DEBUG] Token inv치lido ou expirado, renovando...");
            return refreshToken();
        }
        
        System.out.println("游댌 [DEBUG] Token ainda v치lido");
        return currentToken;
    }

    @Override
    public String refreshToken() {
        System.out.println("游댌 [DEBUG] Iniciando renova칞칚o de token...");
        
        try {
            System.out.println("游댌 [DEBUG] Fazendo chamada para API de autentica칞칚o...");
            System.out.println("游댌 [DEBUG] URL: https://api.auth.sand.antecipa.com/v1/authentication/signin");
            System.out.println("游댌 [DEBUG] Authorization: Basic " + basicAuth.substring(0, 20) + "...");
            
            Response response = authClient.signin("Basic " + basicAuth);
            
            System.out.println("游댌 [DEBUG] Resposta recebida:");
            System.out.println("游댌 [DEBUG] Status: " + response.status());
            System.out.println("游댌 [DEBUG] Headers: " + response.headers());
            
            if (response.body() != null) {
                try {
                    String responseBody = new String(response.body().asInputStream().readAllBytes());
                    System.out.println("游댌 [DEBUG] Body: " + responseBody);
                    
                    if (response.status() == 200) {
                        // Tentar parsear manualmente
                        if (responseBody.contains("access_token")) {
                            String token = extractTokenFromJson(responseBody);
                            if (token != null) {
                                currentToken = token;
                                tokenExpiry = LocalDateTime.now().plusHours(1);
                                System.out.println("游댌 [DEBUG] Token extra칤do com sucesso: " + token.substring(0, 20) + "...");
                                return token;
                            }
                        }
                    }
                } catch (Exception e) {
                    System.err.println("游댌 [DEBUG] Erro ao ler body: " + e.getMessage());
                }
            }
            
            throw new AuthenticationException("Resposta de autentica칞칚o inv치lida - Status: " + response.status());
            
        } catch (FeignException e) {
            System.err.println("游댌 [DEBUG] FeignException:");
            System.err.println("游댌 [DEBUG] Status: " + e.status());
            System.err.println("游댌 [DEBUG] Message: " + e.getMessage());
            System.err.println("游댌 [DEBUG] Content: " + e.contentUTF8());
            
            throw new AuthenticationException("Erro na comunica칞칚o com servi칞o de autentica칞칚o: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("游댌 [DEBUG] Exception geral: " + e.getMessage());
            e.printStackTrace();
            
            throw new AuthenticationException("Erro inesperado na autentica칞칚o: " + e.getMessage());
        }
    }

    private String extractTokenFromJson(String json) {
        try {
            // Extra칞칚o simples do token do JSON
            String searchFor = "\"access_token\":\"";
            int startIndex = json.indexOf(searchFor);
            if (startIndex != -1) {
                startIndex += searchFor.length();
                int endIndex = json.indexOf("\"", startIndex);
                if (endIndex != -1) {
                    return json.substring(startIndex, endIndex);
                }
            }
        } catch (Exception e) {
            System.err.println("游댌 [DEBUG] Erro ao extrair token: " + e.getMessage());
        }
        return null;
    }
}
