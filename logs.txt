br.com.experian.anticipation.application.rest.HistoryController is not abstract and does not override abstract method findHistory(@jakarta.validation.Valid java.time.LocalDate,@jakarta.validation.Valid java.lang.String,@jakarta.validation.Valid java.lang.String,@jakarta.validation.constraints.Min(1L),@jakarta.validation.constraints.Max(100L),@jakarta.validation.Valid java.lang.Integer) in br.com.experian.swagger.anticipation.api.HistoryApi
method does not override or implement a method from a supertype

Class 'HistoryController' must either be declared abstract or implement abstract method 'findHistory(LocalDate, String, String, Integer)' in 'HistoryApi'
Method does not override method from its superclass

package br.com.experian.anticipation.application.rest;

import br.com.experian.anticipation.domain.dto.response.UserAccount;
import br.com.experian.anticipation.domain.service.HistoryService;
import br.com.experian.anticipation.domain.service.impl.HistoryServiceImpl;
import br.com.experian.anticipation.domain.service.impl.ReceivablesServiceImpl;
import br.com.experian.observability.annotation.LogMethod;
import br.com.experian.swagger.anticipation.api.HistoryApi;
import br.com.experian.swagger.anticipation.model.HistoryResponseTO;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.util.Optional;

@Log4j2
@RestController
public class HistoryController extends BaseController implements HistoryApi {

    private final HistoryService historyService;

    public HistoryController(HistoryService historyService) {
        this.historyService = historyService;
    }

    @Override
    @PreAuthorize(HAS_RULES)
    @LogMethod(LogMethod.LogType.FULL)
    public ResponseEntity<HistoryResponseTO> findHistory(LocalDate anticipationDate,
                                                         String statusId,
                                                         Integer limit,
                                                         Integer offset) {
        final int pageLimit = limit != null ? limit : 10;
        final int pageOffset = offset != null ? offset : 0;

        String anticipationDateStr = anticipationDate != null ? anticipationDate.toString() : null;

        Optional<HistoryResponseTO> historyOpt = this.historyService.findHistoryWithReceivables(null,
                anticipationDateStr, null, statusId, String.valueOf(pageOffset), pageLimit);

        if (historyOpt.isEmpty()) {
            log.info("No anticipation history found for the given filters");
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(historyOpt.get());

    }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.experian.swagger.anticipation.api;

import org.springframework.format.annotation.DateTimeFormat;
import br.com.experian.swagger.anticipation.model.ErrorModelTO;
import br.com.experian.swagger.anticipation.model.HistoryResponseTO;
import java.time.LocalDate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-03T12:28:41.711781400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "History", description = "the History API")
public interface HistoryApi {

    /**
     * GET /history : Retrieve anticipation history
     * Retrieve anticipation history with receivables details including netValue
     *
     * @param anticipationDate Anticipation date to filter (format YYYY-MM-DD) (optional)
     * @param statusId Status ID to filter anticipations (optional)
     * @param pageId Page ID for pagination (optional)
     * @param pageSize Number of items per page (optional, default to 10)
     * @return The Request was successful (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Failed Dependency (status code 424)
     *         or Internal Server Error (status code 500)
     *         or Unexpected Error (status code 200)
     */
    @Operation(
        operationId = "findHistory",
        summary = "Retrieve anticipation history",
        description = "Retrieve anticipation history with receivables details including netValue",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The Request was successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoryResponseTO.class))
            }),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "424", description = "Failed Dependency", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModelTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history",
        produces = { "application/json" }
    )
    
    ResponseEntity<HistoryResponseTO> findHistory(
        @Parameter(name = "anticipationDate", description = "Anticipation date to filter (format YYYY-MM-DD)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "anticipationDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate anticipationDate,
        @Parameter(name = "statusId", description = "Status ID to filter anticipations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statusId", required = false) String statusId,
        @Parameter(name = "pageId", description = "Page ID for pagination", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageId", required = false) String pageId,
        @Min(1) @Max(100) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize
    );

}


swagger: '2.0'
info:
  version: 1.0.0
  title: PME-Receivables-Anticipation-BR
  description: >-
    This API persist and returns the receivables information.
  contact:
    name: Squad Gest√£o Financeira
    email: squadgestaofinanceira@br.experian.com
host: sandbox-api.serasaexperian.com.br
basePath: /serasaempreendedor/receivables-anticipation/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OauthSecurityUser:
    type: oauth2
    flow: password
    tokenUrl: https://sandbox-api.serasaexperian.com.br/security/iam/v1/user-identities/login
    scopes:
      read: User read scope

paths:
  /onboarding:
    get:
      tags:
        - Onboarding
      description: Retrive onboarding status
      summary: Retrive onboarding status
      security:
        - OauthSecurityUser:
            - read
      operationId: retrieveStatus
      responses:
        200:
          description: The request was successful
          schema:
            $ref: "#/definitions/OnboardingResponse"
        204:
          description: Not started
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        424:
          description: Failed Dependency
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
    post:
      tags:
        - Onboarding
      description: Start onboarding process
      summary: Start onboarding process
      security:
        - OauthSecurityUser:
            - read
      operationId: accept
      responses:
        204:
          description: The request was successful
          headers:
            location:
              type: string
              description: 'Redirect URL: https://cadastro.pagbank.com.br/serasa-empreendedor'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        424:
          description: Failed Dependency
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
  /history:
    get:
      tags:
        - History
      description: Retrieve anticipation history with receivables details including netValue
      summary: Retrieve anticipation history
      operationId: findHistory
      parameters:
        - name: anticipationDate
          in: query
          description: Anticipation date to filter (format YYYY-MM-DD)
          required: false
          type: string
          format: date
        - name: statusId
          in: query
          description: Status ID to filter anticipations
          required: false
          type: string
        - name: pageId
          in: query
          description: Page ID for pagination
          required: false
          type: string
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          type: integer
          minimum: 1
          maximum: 100
          default: 10
      responses:
        200:
          description: The Request was successful
          schema:
            $ref: "#/definitions/HistoryResponse"
        204:
          description: No Content
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        424:
          description: Failed Dependency
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
  /receivables:
    get:
      tags:
        - Receivables
      description: Retrieve available receivables grouped by payment date
      summary: Retrieve available receivables
      security:
        - OauthSecurityUser:
            - read
      operationId: findAvailables
      parameters:
        - name: date
          in: query
          description: Payment date to filter receivables (format YYYY-MM-DD). Defaults to today's date if not provided.
          required: false
          type: string
          format: date
        - name: limit
          in: query
          description: Maximum number of receivables to return
          required: false
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        - name: offset
          in: query
          description: Number of receivables to skip for pagination
          required: false
          type: integer
          minimum: 0
          default: 0
      responses:
        200:
          description: The request was successful
          schema:
            $ref: "#/definitions/ReceivableGroupedResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorModel"
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        424:
          description: Failed Dependency
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
  /market-availability:
    get:
      tags:
        - Market
      description: Check if the market is available for operations based on business hours and holidays
      summary: Check market availability
      security:
        - OauthSecurityUser:
            - read
      operationId: checkMarketAvailability
      responses:
        204:
          description: Market is open and available for operations
        410:
          description: Market is closed (outside business hours or holiday)
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error

definitions:
  OnboardingResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/OnboardingStatus'
  OnboardingStatus:
    type: string
    enum:
      - STARTED
      - REVIEW
      - PENDING
      - APPROVED
      - REJECTED

  HistoryResponse:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/HistoryItem'
      nextPage:
        type: string
        x-nullable: true
      pageSize:
        type: integer
    required: [items, pageSize]

  HistoryItem:
    type: object
    properties:
      id:
        type: string
      requestDate:
        type: string
        format: date
        example: "2025-09-01"
        x-field-extra-annotation: >
          @com.fasterxml.jackson.annotation.JsonFormat(
          shape = com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING,
          pattern = "yyyy-MM-dd")
      status:
        type: string
        enum: [PENDING, CONCLUDED, ERROR, PARTIALLY_APPROVED, REJECTED, PAID]
      receivablesCount:
        type: integer
        description: Total count of receivables for this anticipation
      receivables:
        type: array
        items:
          $ref: '#/definitions/ReceivableItem'
      totalNetValue:
        type: string
        format: decimal
        description: Sum of all netValue from receivables
    required: [id, requestDate, status, receivablesCount, receivables, totalNetValue]

  ReceivableItem:
    type: object
    properties:
      cnpj:
        type: string
        example: '12.345.678/0001-00'
      accreditingInstitution:
        type: string
        example: 'Stone'
      installments:
        type: integer
        example: 3
      installmentValue:
        type: string
        format: decimal
        example: "500.00"
      feePercentage:
        type: string
        format: decimal
        example: "1.99"
      discountValue:
        type: string
        format: decimal
        example: "15.00"
      netValue:
        type: string
        format: decimal
        example: "485.00"
        description: Same as receivedAmount from partner API
    required: [cnpj, accreditingInstitution, installments, installmentValue, feePercentage, discountValue, netValue]

  ReceivableGroupedResponse:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/ReceivableGroup'
      page:
        $ref: '#/definitions/Pagination'

  ReceivableGroup:
    type: object
    properties:
      paymentDate:
        type: string
        example: '2025-07-22'
      count:
        type: integer
        example: 5
      totalAmountToReceive:
        type: number
        example: '7422.25'
      items:
        type: array
        items:
          $ref: '#/definitions/ReceivableData'
  ReceivableData:
    type: object
    properties:
      id:
        type: string
        example: 'f63985b1-619d-4514-ab19-bd1ec6f69ab0'
      paymentDate:
        type: string
        example: '2025-07-22'
      nationalRegistrationId:
        type: string
        example: '18772021000190'
      accreditingInstitutionName:
        type: string
        example: 'Cielo'
      paymentType:
        $ref: '#/definitions/PaymentType'
      installment:
        $ref: '#/definitions/InstallmentData'
      discount:
        type: number
        example: '50.00'
      amountToReceive:
        type: number
        example: '1484.45'
  PaymentType:
    type: string
    enum:
      - CREDIT_SINGLE
      - CREDIT_INSTALLMENT
    example: 'CREDIT_INSTALLMENT'
  InstallmentData:
    type: object
    properties:
      count:
        type: integer
        example: '3'
      number:
        type: integer
        example: '1'
      amount:
        type: number
        example: '1534.45'
      paymentType:
        $ref: '#/definitions/PaymentType'
      discount:
        type: number
        example: '50.00'
  Pagination:
    type: object
    properties:
      size:
        type: integer
        example: 10
      totalElements:
        type: integer
        example: 50
      totalPages:
        type: integer
        example: 5
      number:
        type: integer
        example: 1

  ErrorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string






