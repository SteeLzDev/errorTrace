    private List<AntecipaAnticipationCardReceivableListDto> extractItems(
            AntecipaAnticipationCardReceivableListDtoPagedCollectionItems pagedResponse) {
        if (pagedResponse == null || pagedResponse.getItems() == null) {
            return new ArrayList<>();
        }
        
        List<Object> rawItems = pagedResponse.getItems().get();
        List<AntecipaAnticipationCardReceivableListDto> convertedItems = new ArrayList<>();
        
        ObjectMapper objectMapper = new ObjectMapper();
        
        for (Object item : rawItems) {
            try {
                if (item instanceof LinkedHashMap) {
                    // Converter LinkedHashMap para DTO usando ObjectMapper
                    AntecipaAnticipationCardReceivableListDto dto = objectMapper.convertValue(
                        item, AntecipaAnticipationCardReceivableListDto.class);
                    convertedItems.add(dto);
                } else if (item instanceof AntecipaAnticipationCardReceivableListDto) {
                    // Se já é o tipo correto, adicionar diretamente
                    convertedItems.add((AntecipaAnticipationCardReceivableListDto) item);
                } else {
                    log.warn("Unexpected item type in response: {}", item.getClass().getName());
                }
            } catch (Exception e) {
                log.error("Error converting item to DTO: {}", e.getMessage(), e);
            }
        }
        
        return convertedItems;
    }
