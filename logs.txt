
            AnticipationHistoryResponseTO response = new AnticipationHistoryResponseTO();

            response.setItems(new ArrayList<>(historyItems));
            response.setPageSize(pageSize != null ? pageSize : 10);


Incompatible types. Found: 'java.util.ArrayList<br.com.experian.swagger.anticipation.model.AnticipationHistoryItemTO>', required: 'br.com.experian.swagger.anticipation.model.AnticipationHistoryItemTO'

package br.com.experian.swagger.anticipation.model;

import java.net.URI;
import java.util.Objects;
import br.com.experian.swagger.anticipation.model.AnticipationHistoryItemTO;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.springframework.lang.Nullable;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * AnticipationHistoryResponseTO
 */

@JsonTypeName("AnticipationHistoryResponse")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T01:32:27.981379600-03:00[America/Sao_Paulo]", comments = "Generator version: 7.11.0")
public class AnticipationHistoryResponseTO implements Serializable {

  private static final long serialVersionUID = 1L;

  private @Nullable AnticipationHistoryItemTO items;

  private @Nullable String pageNexId;

  private @Nullable Integer pageSize;

  public AnticipationHistoryResponseTO items(AnticipationHistoryItemTO items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @Valid 
  @Schema(name = "items", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("items")
  public AnticipationHistoryItemTO getItems() {
    return items;
  }

  public void setItems(AnticipationHistoryItemTO items) {
    this.items = items;
  }

  public AnticipationHistoryResponseTO pageNexId(String pageNexId) {
    this.pageNexId = pageNexId;
    return this;
  }

  /**
   * Get pageNexId
   * @return pageNexId
   */
  
  @Schema(name = "pageNexId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("pageNexId")
  public String getPageNexId() {
    return pageNexId;
  }

  public void setPageNexId(String pageNexId) {
    this.pageNexId = pageNexId;
  }

  public AnticipationHistoryResponseTO pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  
  @Schema(name = "pageSize", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("pageSize")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnticipationHistoryResponseTO anticipationHistoryResponse = (AnticipationHistoryResponseTO) o;
    return Objects.equals(this.items, anticipationHistoryResponse.items) &&
        Objects.equals(this.pageNexId, anticipationHistoryResponse.pageNexId) &&
        Objects.equals(this.pageSize, anticipationHistoryResponse.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, pageNexId, pageSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnticipationHistoryResponseTO {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    pageNexId: ").append(toIndentedString(pageNexId)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

