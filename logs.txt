package br.com.experian.buzz.infrastructure.integration.feign.client.antecipa;

import br.com.experian.antecipa.model.*;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;

/**
 * üîß SOLU√á√ÉO RADICAL: Cliente Feign M√çNIMO para eliminar TODOS os conflitos.
 * ESTRAT√âGIA:
 * 1. ‚úÖ Apenas m√©todos GET simples inicialmente
 * 2. ‚úÖ ZERO mistura de tipos de par√¢metros
 * 3. ‚úÖ Nomes √∫nicos e sem ambiguidade
 * 4. ‚úÖ Headers expl√≠citos apenas onde necess√°rio
 */
@FeignClient(name = "AntecipaClient", url = "${api.antecipa.uri}")
public interface AntecipaClient {

    /**
     * üîß GET SIMPLES: Consulta status de registro do fornecedor.
     * APENAS path variables - SEM body, SEM query params, SEM form params.
     */
    @GetMapping("/Originators/CapitalSources/{CapitalSourceDocument}/Suppliers/{SupplierDocument}")
    @CircuitBreaker(name = "AntecipaClient")
    @Retry(name = "AntecipaClient")
    SupplierRegistrationDto consultarStatusFornecedor(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("CapitalSourceDocument") String capitalSourceDocument,
            @PathVariable("SupplierDocument") String supplierDocument);

    /**
     * üîß GET SIMPLES: Lista receb√≠veis b√°sica.
     * APENAS path variable - SEM query params por enquanto.
     */
    @GetMapping("/Originators/CardReceivables/{SupplierDocument}")
    @CircuitBreaker(name = "AntecipaClient")
    @Retry(name = "AntecipaClient")
    CardReceivableListDtoPagedCollectionItems listarRecebiveis(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument);

    /**
     * üîß GET SIMPLES: Busca receb√≠vel por ID.
     * APENAS path variables - SEM outros par√¢metros.
     */
    @GetMapping("/Originators/CardReceivables/{SupplierDocument}/{Id}")
    @CircuitBreaker(name = "AntecipaClient")
    @Retry(name = "AntecipaClient")
    CardReceivableDto buscarRecebivelPorId(
            @RequestHeader("Authorization") String bearerToken,
            @PathVariable("SupplierDocument") String supplierDocument,
            @PathVariable("Id") String recebivelId);
}
